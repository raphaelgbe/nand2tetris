class BreakoutGame {
    field int unit_size;  // the smallest meaningful size in game objects
    field int speed;  // speed of the game (linked to refreshing frequency)
    field int pad_length;  // length of the pad (its thickness is a unit size long)
    field int num_bricks_x;  // number of bricks along x axis
    field int num_bricks_y;  // number of bricks along y axis
    field int offset_x;  // offset of bricks blob along x axis
    field int offset_y;  // offset of bricks blob along y axis
    field Pad pad;  // the pad controlled by the player
    field Ball ball;  // the ball
    field Bricks bricks; // the set of bricks
    field int screen_base_address;  // the base address of the Memory Map of the Screen in the RAM
    field int upper_left_bricks_reg_address;  // register holding the upper-right pixels of the bricks wall
    field int span_bricks_reg_address;  // number of register containing brick pixels in one row
    field int number_brick_rows_left;  // number of rows from bottom to toppest row containing at least one brick
    field Array powers_of_two;

    constructor BreakoutGame new(int game_unit_size, int game_speed, int game_pad_length, int game_num_bricks_x, int game_num_bricks_y, int game_offset_x, int game_offset_y) {
        let unit_size = game_unit_size;
        let speed = game_speed;
        let pad_length = game_pad_length;
        let num_bricks_x = game_num_bricks_x;
        let num_bricks_y = game_num_bricks_y;
        let offset_x = game_offset_x;
        let offset_y = game_offset_y;
        let ball = Ball.new(game_unit_size);
        let pad = Pad.new(game_unit_size, game_pad_length);
        let bricks = Bricks.new(game_unit_size, game_num_bricks_x, game_num_bricks_y, game_offset_x, game_offset_y);
        let screen_base_address = 16384;
        let upper_left_bricks_reg_address = screen_base_address + (offset_x / 16);
        let span_bricks_reg_address = ((num_bricks_x * unit_size) / 16) + 1; // adding 1 to be safe (shouldn't get to next line due to empty space between bricks & wall)
        let number_brick_rows_left = 256;
        let powers_of_two = _initializePowersOfTwo();
        return this;
    }

    method void dispose() {
        do pad.dispose();
        do ball.dispose();
        do bricks.dispose();
        do Memory.deAlloc(this);
        return;        
    }

    method Array _initializePowersOfTwo() {
        var Array pows;
        let pows = Array.new(16);
        let pows[0] = 1;
        let pows[1] = 2;
        let pows[2] = 4;
        let pows[3] = 8;
        let pows[4] = 16;
        let pows[5] = 32;
        let pows[6] = 64;
        let pows[7] = 128;
        let pows[8] = 256;
        let pows[9] = 512;
        let pows[10] = 1024;
        let pows[11] = 2048;
        let pows[12] = 4096;
        let pows[13] = 8192;
        let pows[14] = 16384;
        let pows[15] = -1-32767;
        return pows;
    }

    method int changeDirectionIfWallBallCollision(int input_direction) {
        var int direction;
        let direction = input_direction;
        if ((ball.getX() + unit_size) = 511) {
            let direction = reflectOnPlane(direction, false);
            // edge corner case taken care of in subsequent condition blocks
        }
        if ( (ball.getY() = 0) | ((ball.getY() + unit_size) = 255) ) {
            let direction = reflectOnPlane(direction, true);
            if ((ball.getY() = 0) & ((ball.getX() + unit_size) = 511)) {let direction = 4;}
            if (((ball.getY() + unit_size) = 255) & ((ball.getX() + unit_size) = 511)) {let direction = 1;}
        }
        return direction;
    }

    method int changeDirectionIfPadBallCollision(int input_direction) {
        var int direction;
        let direction = input_direction;
        if (ball.getX() < (unit_size + 1)) {
            if (( (ball.getY() > (pad.getY() - 1)) & (ball.getY() < (pad.getY() + pad_length)) ) | ( ((ball.getY() + unit_size) > (pad.getY())) & ((ball.getY() + unit_size) < (pad.getY() + pad_length + 1)) )) {
                let direction = reflectOnPlane(direction, false);
                if (ball.getY() = 0) {let direction = 3;}  // typically if ball hits corner between pad and upper wall, down right bounce
                if ((ball.getY() + unit_size) = 255) {let direction = 2;}  // typically if ball hits corner between pad and lower wall, up right bounce
            }
        }
        return direction;
    }

    method bool checkIfPixelIsBlack(int pix_x, int pix_y) {
        var int pix_address;
        var int pix_address_divided_by_sixteen;
        var int pix_isolated_binary_value;
        var int value_in_RAM;
        var bool pixel_is_black;
        let pixel_is_black = false;
        let pix_address_divided_by_sixteen = pix_x / 16;
        let pix_address = screen_base_address + (pix_y * 32) + pix_address_divided_by_sixteen;
        let value_in_RAM = Memory.peek(pix_address);
        let pix_isolated_binary_value = powers_of_two[pix_x - (16 * pix_address_divided_by_sixteen)];
        if (pix_isolated_binary_value & value_in_RAM) {let pixel_is_black = true;}
        return pixel_is_black;
    }

    method int reflectOnPlane(int input_direction, bool plane_is_horizontal) {
        var int direction;
        if (plane_is_horizontal) {
            if (input_direction = 1) {let direction = 4;}
            if (input_direction = 2) {let direction = 3;}
            if (input_direction = 3) {let direction = 2;}
            if (input_direction = 4) {let direction = 1;}
        }
        else {
            if (input_direction = 1) {let direction = 2;}
            if (input_direction = 2) {let direction = 1;}
            if (input_direction = 3) {let direction = 4;}
            if (input_direction = 4) {let direction = 3;}
        }
        return direction;
    }

    method int changeDirectionIfBrickBallCollision(int input_direction) {
        var int direction;
        var bool hit_left;
        var bool hit_right;
        var bool hit_up;
        var bool hit_down;
        var int i;
        let hit_left = false;
        let hit_right = false;
        let hit_up = false;
        let hit_down = false;
        let direction = input_direction;
        let i = 0;
        // 0. If not far enough from pad, do nothing
        if ((ball.getX() + unit_size) < offset_x) {return direction;}
        // 0. If in right wal region, same
        if ((ball.getX() + unit_size) > (offset_x + (num_bricks_x * unit_size))) {return direction;}
        // 1. If wall surrounding, register shock on corresponding side
        if ((ball.getX() + unit_size) = 511) {let hit_right = true;}
        if (ball.getY() = 0) {let hit_up = true;}
        if ((ball.getY() + unit_size) = 255) {let hit_down = true;}
        // 2. Iterate on pixels surrounding ball (will need subroutine to evaluate color of given pixel):
        //     - if black, then call bricks.eraseBrick(coords_of_pixel) + register that shock on corresponding side
        //     - if white, then either removed previously or absent: either way do nothing
        if (~(hit_up)) {
            let i = 0;
            while (i < (unit_size + 1)) {
                if (checkIfPixelIsBlack(ball.getX() + i, ball.getY() - 1)) {
                    do bricks.eraseBrick(ball.getX() + i, ball.getY() - 1);
                    let hit_up = true;
                    }
                let i = i + 1;
                }
        }
        if (~(hit_down)) {
            let i = 0;
            while (i < (unit_size + 1)) {
                if (checkIfPixelIsBlack(ball.getX() + i, ball.getY() + unit_size + 1)) {
                    do bricks.eraseBrick(ball.getX() + i, ball.getY() + unit_size + 1);
                    let hit_down = true;
                    }
                let i = i + 1;
                }
        }
        if (~(hit_right)) {
            let i = 0;
            while (i < (unit_size + 1)) {
                if (checkIfPixelIsBlack(ball.getX() + unit_size + 1, ball.getY() + i)) {
                    do bricks.eraseBrick(ball.getX() + unit_size + 1, ball.getY() + i);
                    let hit_right = true;
                    }
                let i = i + 1;
                }
        }
        // NOTE: hit_left can't be true at this stage, so no condition on following loop:
        let i = 0;
        while (i < (unit_size + 1)) {
            if (checkIfPixelIsBlack(ball.getX() - 1, ball.getY() + i)) {
                do bricks.eraseBrick(ball.getX() - 1, ball.getY() + i);
                let hit_left = true;
                }
            let i = i + 1;
            }
        // 3. Depending on hit sides, change direction
        if ((hit_up & ~(hit_left | hit_right)) | (hit_down & ~(hit_left | hit_right)))
        {let direction = reflectOnPlane(direction, true);}
        if ((hit_left & ~(hit_down | hit_up)) | (hit_right & ~(hit_down | hit_up)))
        {let direction = reflectOnPlane(direction, false);}
        if (hit_up & hit_right) {let direction = 4;}
        if (hit_down & hit_left) {let direction = 2;}
        if (hit_down & hit_right) {let direction = 1;}
        if (hit_up & hit_left) {let direction = 3;}
        return direction;
    }

    method bool noBrickLeft() {
        var int i;
        var int j;
        var int register_to_test;
        var int value_register_to_test;
        let i = 0;
        while (i < number_brick_rows_left) {
            let j = 0;
            while (j < span_bricks_reg_address) {
                let register_to_test = upper_left_bricks_reg_address + (i * 32) + j;
                let value_register_to_test = Memory.peek(register_to_test);
                if (~(value_register_to_test = 0)) {return false;}
                let j = j + 1;
            }
            // if we didn't return false after iterating on first row, no bricks left there!
            // therefore, in order to keep same timeliness when checking for brick left, update upper left (makes a significant diff in practice):
            let upper_left_bricks_reg_address = upper_left_bricks_reg_address + 32;
            let number_brick_rows_left = number_brick_rows_left - 1;
            let i = i + 1;
        }
        return true;
        /* // PREVIOUS VERSION, OBVIOUSLY WAY TOO SLOW WHEN TOO MANY BRICKS BROKEN
        let i = offset_x;
        let j = offset_y;
        while (i < (offset_x + (num_bricks_x * unit_size))) {
            while (j < (offset_y + (num_bricks_y * unit_size))) {
                if (checkIfPixelIsBlack(i, j)) {return false;}
                let j = j + 1;
            }
            let i = i + 1;
        }
        return true;*/
    }

    method void launch() {
        // always move ball before moving/updating bricks because it erases its trace (so may need to reprint it)
        // note: ball direction given by: 1: upLeft, 2: upRight, 3: downRight, 4: downLeft
        var int ball_direction;
        var int new_ball_direction;
        var char key;
        var bool game_over;
        var String endgame;
        let ball_direction = 3;
        let key = 0;
        let game_over = false;
        while (~(game_over)) {
            let key = Keyboard.keyPressed();
            if (ball_direction = 1) {do ball.moveUpLeft();}
            if (ball_direction = 2) {do ball.moveUpRight();}
            if (ball_direction = 3) {do ball.moveDownRight();}
            if (ball_direction = 4) {do ball.moveDownLeft();}
            if (key = 131) {do pad.moveUp();}  // up arrow
            if (key = 133) {do pad.moveDown();}  // down arrow
            do pad.draw();
            let new_ball_direction = changeDirectionIfPadBallCollision(ball_direction); // takes priority on Wall/Ball collision : if corner between pad & wall, managed here
            // note that bricks & pad clearly in two distinct screen halves, so they can't both change the direction (it depends on where the ball is) (unless we have a HUGE unit_size, which would be bad to begin with)
            let new_ball_direction = changeDirectionIfBrickBallCollision(new_ball_direction); // takes priority on Wall/Ball collision : if corner between brick & wall, managed here
            if (new_ball_direction = ball_direction) {let new_ball_direction = changeDirectionIfWallBallCollision(ball_direction);}
            let ball_direction = new_ball_direction;
            let game_over = (ball.getX() = 0) | noBrickLeft();
            do Sys.wait(speed);
        }
        if (noBrickLeft()) {let endgame = "Congratulations! You successfully finished Breakout!!";}
        if (ball.getX() = 0) {let endgame = "GAME OVER! Better luck next time?";}
        do Screen.clearScreen();
        do Output.printString(endgame);
        return;
    }
}