// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array powers_of_two;
    static int num_bits;
    static int num_addresses_by_line;
    static bool color;
    static int screen_base;
    static int screen_end;
    static int screen_width;
    static int screen_height;

    /** Initializes the Screen. */
    function void init() {
        let powers_of_two = Screen._initializePowersOfTwo();
        let num_bits = 16;
        let num_addresses_by_line = 32;
        let color = true;
        let screen_base = 16384;
        let screen_end = 24575;
        let screen_width = 512;
        let screen_height = 256;
        return;
    }

    function Array _initializePowersOfTwo() {
        var Array pows;
        let pows = Array.new(16);
        let pows[0] = 1;
        let pows[1] = 2;
        let pows[2] = 4;
        let pows[3] = 8;
        let pows[4] = 16;
        let pows[5] = 32;
        let pows[6] = 64;
        let pows[7] = 128;
        let pows[8] = 256;
        let pows[9] = 512;
        let pows[10] = 1024;
        let pows[11] = 2048;
        let pows[12] = 4096;
        let pows[13] = 8192;
        let pows[14] = 16384;
        let pows[15] = -1-32767;
        return pows;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int address;
        let address = screen_base;
        while (address < (screen_end + 1)) {
            do Memory.poke(address, 0);
            let address = address + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        var int value;
        var int bit_position_in_address;
        let address = ((y * num_addresses_by_line) + (x / num_bits) + screen_base);
        let bit_position_in_address = x - ((x/num_bits) * num_bits);
        let value = Memory.peek(address);
        if (color) {
            let value = (value | powers_of_two[bit_position_in_address]);
        } else {
            let value = (value & (~(powers_of_two[bit_position_in_address])));
        }
        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a;
        var int b;
        var int dx;
        var int dy;
        var int temp_address;
        var int slope;
        var int diff;
        var int x_left;
        var int x_right;
        var int y_start;
        var int y_end;
        var int direction_sign;
        var bool update_is_horizontal;
        let dx = x2 - x1;
        let dy = y2 - y1;
        if (dy = 0) {
            if (dx = 0) {
                do Screen.drawPixel(x1, y1);
                return;
            } else {
                let x_left = Math.min(x1, x2);
                let x_right = Math.max(x1, x2);
                let a = x_left;
                while (a < (x_right + 1)) {  // NOTE: we go faster for long lines by computing which 16-bit addresses to set to -1 instead of doing 16 1-bit drawPixel operations
                    let temp_address = (y1 * num_addresses_by_line) + (a / num_bits) + screen_base;
                    if ((((a / num_bits) * num_bits) = a) & ((a + num_bits) < (x_right + 1))) {
                        if (color) {
                            do Memory.poke(temp_address, -1);
                        } else {
                            do Memory.poke(temp_address, 0);
                        }
                        let a = a + num_bits;
                    } else {
                        do Screen.drawPixel(a, y1);
                        let a = a + 1;
                    }
                }
                return;
            }
        }
        if (dx = 0) {
            let y_start = Math.min(y1, y2);
            let y_end = Math.max(y1, y2);
            let b = y_start;
            while (b < (y_end + 1)) {
                do Screen.drawPixel(x1, b);
                let b = b + 1;
            }
            return;
        }
        let direction_sign = 1;
        let slope = dy / dx;
        if ((slope < 0) | ((dy * dx) < 0)) {  // second condition for cases where slope < 1 (no float in Jack)
            let direction_sign = -1;
        }
        if (dx > 0) {
            let x_left = x1;
            let x_right = x2;
            let y_start = y1;
            let y_end = y2;
        } else {
            let x_left = x2;
            let x_right = x1;
            let y_start = y2;
            let y_end = y1;
        }
        let a = 0;
        let b = 0;
        let diff = 0;  // diff will be  a * dy - b * dx to represent the comparison of dy/dx with b/a
        let dx = Math.abs(dx);
        let dy = Math.abs(dy);
        let slope = Math.abs(slope);
        while ((~(a > dx)) & (~(b > dy))) {
            do Screen.drawPixel(x_left + a, y_start + (direction_sign * b));
            if (diff = 0) {
                if (slope = 0) {let update_is_horizontal = true;} // no float in Jack so the condition actually implies 0 <= slope < 1
                else {let update_is_horizontal = false;}
            }
            if (diff < 0) {let update_is_horizontal = true;}  // i.e. if dy/dx < b/a, we want to readjust trajectory by going horizontally
            if (diff > 0) {let update_is_horizontal = false;}
            if (update_is_horizontal) {
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
     // NOTE: this implies x1 <= x2 and y1 <= y2 ; note also that the optimization for drawLine for horizontal lines as said in comments is leveraged here by drawing the rectangle row by row
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y = y1;
        while (~(y > y2)) {
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int last_row;
        var int horizontal_shift;
        if (r > 181) {
            do Screen.drawPixel(x, y);
            return;
        }
        let dy = -r;
        while ((y + dy) < 0) {
            let dy = dy + 1;
        }
        let last_row = Math.min(y + r, screen_height);
        while (~((y + dy) > last_row)) {
            let horizontal_shift = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(Math.max(0, x - horizontal_shift), y + dy, Math.min(screen_width, x + horizontal_shift), y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
// TODO!!! SIMPLIFY drawLine last two cases by replacing go_south_east by direction_sign = 1 for go_south_east, -1 for north east, & multiplying b by direction_sign in drawPixel