// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array str;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {let maxLength = 1;}
        let str = Array.new(maxLength);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose(); // let's leverage the dispose method from the Array class
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    // NOTE: no error management so we assume length will stay below maxLength
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length = 0) {return;}
        let length = length - 1;
        return;
    }

    /* Helper function to cast char to int for digit numbers. */
    function int charToDigit(char c) {
        return c - 48;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int out;
        var boolean is_negative;
        var int index;
        if ((length = 6) & (str[0] = 45) & (str[1] = 51) & (str[2] = 50) & (str[3] = 55) & (str[4] = 54) & (str[5] = 56)) {return (-1 - 32767);}
        let out = 0;
        let index = 0;
        let is_negative = false;
        if (str[0] = 45) {
            let is_negative = true;
            let index = index + 1;
        }
        while (index < length) {
            let out = (out * 10) + String.charToDigit(str[index]);
            let index = index + 1;
        }
        if (is_negative) {let out = -out;}
        return out;
    }

    /* Helper function to cast digit ints to chars (otherwise weird behaviour). */
    function char digitToChar(int digit) {
        return 48 + digit;
    }

    /* Helper recursive function to convert int to String. */
    method void intToString(int val) {
        var int last_digit;
        var char to_append;
        var int val_over_ten;
        let val_over_ten = val / 10;
        let last_digit = val - (10 * val_over_ten);
        let to_append = String.digitToChar(last_digit);
        if (val < 10) {
            do appendChar(to_append);
        } else {
            do intToString(val_over_ten);
            do appendChar(to_append);
        }
        return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        if (val = (-1 -32767)) {
            let length = 6;
            let str[0] = 45;
            let str[1] = 51;
            let str[2] = 50;
            let str[3] = 55;
            let str[4] = 54;
            let str[5] = 56;
            return;
        }
        let length = 0;
        if (val < 0) {
            let val = -val;
            do appendChar(45); // minus "-" sign
            let length = 1;
        }
        do intToString(val);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        var char out;
        let out = 128;
        return out;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        var char out;
        let out = 129;
        return out;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        var char out;
        let out = 34;
        return out;
    }
}
