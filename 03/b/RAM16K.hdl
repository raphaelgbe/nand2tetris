// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux4Way(in=load, sel=address[0..1], a=dummyLoad0, b=dummyLoad1, c=dummyLoad2, d=dummyLoad3);
    RAM4K(in=in, address=address[2..13], load=dummyLoad0, out=dummyOut0);
    RAM4K(in=in, address=address[2..13], load=dummyLoad1, out=dummyOut1);
    RAM4K(in=in, address=address[2..13], load=dummyLoad2, out=dummyOut2);
    RAM4K(in=in, address=address[2..13], load=dummyLoad3, out=dummyOut3);
    //RAM4K(in=in, address=address[2..13], load=dummyLoad{i}, out=dummyOut{i});
    Mux4Way16(a=dummyOut0, b=dummyOut1, c=dummyOut2, d=dummyOut3, sel=address[0..1], out=out);
    //s = "abcd"
    //", ".join((f"{c}=dummyOut{i}" for i, c in enumerate(s)))
}